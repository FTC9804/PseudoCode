//BOMB_SQUAD_ROBOTICS


//THIS HAS TEST ENCODER CODE

package com.qualcomm.ftcrobotcontroller.opmodes.BombSquadOpModes;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.GyroSensor;

public class First extends LinearOpMode {

    DcMotor right;
    DcMotor left;
    
     //tetrix motor controllers put out 1440 pulses per rotation
    final static int ENCODER_CPR = 1440;
    //input gear turns twice for every output gear
    //need this to find motor turn from the given wheel turn
    final static double GEAR_RATIO = 2;
    //this won't actually be the real diameter because we are doing treads. 
    //we can try using the diameter from the pulley used to calculate the distance
    final static int WHEEL_DIAMETER = 4;
    //distance in inches
    final static int DISTANCE = 25;

	//uses easy formula of pi*d=C
    final static double CIRCUMFRENCE = Math.PI * WHEEL_DIAMETER;
    find rotations of the MOTOR not WHEEL
    final static double ROTATIONS = DISTANCE / CIRCUMFRENCE;
    // motor rotations * counts per revolution * gear ratio
    final static double COUNTS = ENCODER_CPR * ROTATIONS * GEAR_RATIO;
    
    double speed = 1;

    //distances
    int a;
    int b;
    int c;
    int d;
    
    //target headings
    int targetHeadingA = 0;
    int TargetHeadingB = -135;
    
    //pid calculations
    double gain = 0.1;
    double steeringError;
    double leftPower;
    double rightPower;
    int currentHeading = 0;
    double steeringAdjustment = 0.0;

    @Override
    public void runOpMode() throws InterruptedException {
    	//associating hardware map with variables in program
        right = hardwareMap.dcMotor.get("m1");
        left = hardwareMap.dcMotor.get("m2");
        //right motor reversed b/c pointed in opposite direction
        right.setDirection(DcMotor.Direction.REVERSE);
        
        //encoder counters are reset
        left.setChannelMode(DcMotorController.RunMode.RESET_ENCODERS);
        right.setChannelMode(DcMotorController.RunMode.RESET_ENCODERS);
		
		//encoder count for desired distance
        left.setTargetPosition((int) COUNTS);
        right.setTargetPosition((int) COUNTS);

		//mode in which controller should operate the motor
		/* the robot will travel at the set speed to the given position
		once it reaches the set encoder count, it will stop motors
		and hold given position.*/
		left.setChannelMode(DcMotorController.RunMode.RUN_TO_POSITION);
        right.setChannelMode(DcMotorController.RunMode.RUN_TO_POSITION);
        
		//this statement will continally run
		while(true)
         {
			if (COUNTS <= left.getCurrentPosition()) {
				left.SetValue(0);
				//all other motors set to 0
			}
			if (COUNTS <= right.getCurrentPosition()) {
				right.SetValue(0);
			}
    	}

        //gyro setup & calibration
        GyroSensor sensorGyro;
        sensorGyro = hardwareMap.gyroSensor.get("gyro");
        sensorGyro.calibrate();
        waitForStart();
        while (sensorGyro.isCalibrating()) {
            Thread.sleep(50);

        //forward b
        while (encoderstuff){
            currentHeading = sensorGyro.getHeading();
            if (currentHeading > 180) {
                currentHeading -= 360;
            }
            
            //PID Stuff
            steeringError = currentHeading - targetHeadingA;
            steeringAdjustment = steeringError * gain;
            rightPower = (speed + steeringAdjustment);
            leftPower = (speed - steeringAdjustment);
            if (rightPower < 0.0) {
                rightPower = 0.0;
            }
            if (leftPower < 0.0) {
                leftPower = 0.0;
            }
            if (rightPower > 1.0) {
                rightPower = 1.0;
            }
            if (leftPower > 1.0) {
                leftPower = 1.0;
            }

            //Setting powers
            right.setPower(-rightPower);
            left.setPower(-leftPower);
            telemetry.addData("1. h", String.format("%03d", currentHeading));

            Thread.sleep(50);
        }
        //-135
        while (currentHeading < TargetHeadingB){
            currentHeading = sensorGyro.getHeading();


            right.setPower(-1);
            left.setPower(0);
            
            Thread.sleep(50);
        }
        //forward d
            while (encoderstuff){
                currentHeading = sensorGyro.getHeading();
                if (currentHeading > 180) {
                    currentHeading -= 360;
                }

                //PID Stuff
                steeringError = currentHeading - targetHeadingA;
                steeringAdjustment = steeringError * gain;
                rightPower = (speed + steeringAdjustment);
                leftPower = (speed - steeringAdjustment);
                if (rightPower < 0.0) {
                    rightPower = 0.0;
                }
                if (leftPower < 0.0) {
                    leftPower = 0.0;
                }
                if (rightPower > 1.0) {
                    rightPower = 1.0;
                }
                if (leftPower > 1.0) {
                    leftPower = 1.0;
                }

                //Setting powers
                right.setPower(-rightPower);
                left.setPower(-leftPower);
                telemetry.addData("1. h", String.format("%03d", currentHeading));

                Thread.sleep(50);
            }
        }
    }
}

